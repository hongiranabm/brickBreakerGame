package brickbreaker;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JPanel;
import javax.swing.Timer;

class GamePlay extends JPanel implements KeyListener, ActionListener {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static final int BOLD = 0;
	private boolean play = true;
    private int totalBrick = 21;
    private int score=0;

    private Timer timer;
    private int delay =1;
	private MapGenerator map;
    private int playerX = 310;

    private int ballposX = 120;
    private int ballposY = 350;
    private int ballXdir = -1;
    private int ballYdir = -2;

    

    public GamePlay() {
    	map=new MapGenerator(4,9);
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        timer = new Timer(delay, this);
        timer.start();
    }

    public void paint(Graphics g) {

        // background color
        g.setColor(Color.black);
        g.fillRect(1, 1, 892, 692);
        map.draw((Graphics2D) g);
        //g.setColor(Color.black);
        g.fillRect(0, 0, 3, 692);
        g.fillRect(0, 0, 892, 3);
        g.fillRect(882, 0, 3, 692);

        g.setColor(Color.blue);
        g.fillRect(playerX, 620, 100, 12);

        
        g.setColor(Color.white); // ball color
        g.fillOval(ballposX, ballposY, 20, 20);

        g.setColor(Color.white);
        g.setFont(new Font("serif",Font.BOLD,20));
        g.drawString("Score : "+score, 750, 30);

        if(ballposY>=700) {
        	play=false;
        	ballXdir=0;
        	ballYdir=0;
        	
        	g.setColor(Color.red);
        	g.setFont(new Font("serif",Font.BOLD,40));
        	g.drawString("Game Over!, Score: "+score, 250, 300);
       

        	//g.setFont(new Font("serif",Font.BOLD,25));
        	//g.drawString("Press Enter to restart!", 250, 350);
        }
        g.dispose();
        if(totalBrick<=0) {
        	play=false;
        	ballXdir=0;
        	ballYdir=0;
        	
        	g.setColor(Color.green);
        	g.setFont(new Font("serif",Font.BOLD,40));
        	g.drawString("You Won!, Score: "+score, 250, 300);
       
        }
    }

    @Override
    public void actionPerformed(ActionEvent arg0) {
        if (play) {
    			
            ballposX += ballXdir;
            ballposY += ballYdir;
            if (ballposX < 0) { 
                ballXdir = -ballXdir;
            }
            if (ballposY < 0) { 
                ballYdir = -ballYdir;
            }
            if (ballposX > 860) { 
                ballXdir = -ballXdir;
            }
            if(new Rectangle(ballposX, ballposY, 20, 20).intersects(new Rectangle(playerX,620, 100,8)))
    		{
    			ballYdir=-ballYdir;
    		}
            
            A:for(int i=0; i<map.map.length; i++) {
            	for(int j=0; j<map.map[0].length; j++) {
					if(map.map[i][j]>0) {
            		int width = map.brickWidth;
            		int height = map.brickHeight;
            		int brickXpos = 120 + j*width;
            		int brickYpos = 50 + i*height;
            		

        			Rectangle ballRect = new Rectangle(ballposX, ballposY, 20, 20);
            		Rectangle rect = new Rectangle(brickXpos, brickYpos, width, height);
            		
//            		Rectangle rect;
					Rectangle brickRect = rect;
					if(ballRect.intersects(brickRect)) {
            			map.setBrick(0, i, j);
						totalBrick--;
						score += 5;
						
						if(ballposX+19<=brickXpos || ballposX+1>=brickXpos+width) {
							ballXdir = -ballXdir;
						}
						
						else {
							ballYdir = -ballYdir;
						}
						break A;
            	}
            }
          }

        }
        }

        repaint();

    }

    @Override
    public void keyTyped(KeyEvent arg0) {

    }

    @Override
    public void keyPressed(KeyEvent arg0) {
        if (arg0.getKeyCode() == KeyEvent.VK_RIGHT) { 
            if (playerX >= 780) {
                playerX = 780;
            } else {
                moveRight();

            }
        }
        if (arg0.getKeyCode() == KeyEvent.VK_LEFT) { 
            if (playerX < 15) {
                playerX =15;
            } else {
                moveLeft();

            }
        }

       
        repaint();
    }

    public void moveRight() { 
        play = true;
        playerX +=30;
    }

    public void moveLeft() { 
        play = true;
        playerX -=30;
    }

    @Override
    public void keyReleased(KeyEvent arg0) {

    }

}	
	


package brickbreaker;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;

public class MapGenerator{
	public int map[][];
	public int brickWidth;
	public int brickHeight;

	public MapGenerator(int row, int col){
		map = new int[row][col];
		for(int i=0; i<row; i++){
			for(int j=0; j<col; j++){
				map[i][j] = 1;		
				}
		}
		brickWidth=640/col;
		brickHeight=150/row;
	}
	
	public void setBrick(int value, int r, int c){
		map[r][c] = value;
	}
	
	public void draw(Graphics2D graph){
		for(int i=0; i<map.length; i++){
			for(int j=0; j<map[0].length; j++){
				if(map[i][j] > 0){
					graph.setColor(Color.blue);
					graph.fillRect(j*brickWidth+120, i*brickHeight+50, brickWidth, brickHeight);
					graph.setColor(Color.black);
					graph.setStroke(new BasicStroke(3));
					graph.drawRect(j*brickWidth+120, i*brickHeight+50, brickWidth, brickHeight);
				}
			}
		}
	}
}


package brickbreaker;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
class Main {

    public static void main(String[] args) {
        JFrame obj = new JFrame();
        GamePlay gamePlay = new GamePlay();
        obj.setBounds(10, 10,900, 700);
        obj.setTitle("Brick Breaker");
        obj.setResizable(false);
        obj.setVisible(true);
        obj.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        obj.add(gamePlay);

    }

}	

